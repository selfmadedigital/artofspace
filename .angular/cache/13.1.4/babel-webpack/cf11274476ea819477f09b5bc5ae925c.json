{"ast":null,"code":"/**\n * angular-slugify -- provides slugification for AngularJS\n *\n * Copyright © 2013 Paul Smith <paulsmith@pobox.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the “Software”), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n(function () {\n  \"use strict\";\n\n  var mod = angular.module(\"slugifier\", []); // Unicode (non-control) characters in the Latin-1 Supplement and Latin\n  // Extended-A blocks, transliterated into ASCII characters.\n\n  var charmap = {\n    ' ': \" \",\n    '¡': \"!\",\n    '¢': \"c\",\n    '£': \"lb\",\n    '¥': \"yen\",\n    '¦': \"|\",\n    '§': \"SS\",\n    '¨': \"\\\"\",\n    '©': \"(c)\",\n    'ª': \"a\",\n    '«': \"<<\",\n    '¬': \"not\",\n    '­': \"-\",\n    '®': \"(R)\",\n    '°': \"^0\",\n    '±': \"+/-\",\n    '²': \"^2\",\n    '³': \"^3\",\n    '´': \"'\",\n    'µ': \"u\",\n    '¶': \"P\",\n    '·': \".\",\n    '¸': \",\",\n    '¹': \"^1\",\n    'º': \"o\",\n    '»': \">>\",\n    '¼': \" 1/4 \",\n    '½': \" 1/2 \",\n    '¾': \" 3/4 \",\n    '¿': \"?\",\n    'À': \"`A\",\n    'Á': \"'A\",\n    'Â': \"^A\",\n    'Ã': \"~A\",\n    'Ä': '\"A',\n    'Å': \"A\",\n    'Æ': \"AE\",\n    'Ç': \"C\",\n    'È': \"`E\",\n    'É': \"'E\",\n    'Ê': \"^E\",\n    'Ë': '\"E',\n    'Ì': \"`I\",\n    'Í': \"'I\",\n    'Î': \"^I\",\n    'Ï': '\"I',\n    'Ð': \"D\",\n    'Ñ': \"~N\",\n    'Ò': \"`O\",\n    'Ó': \"'O\",\n    'Ô': \"^O\",\n    'Õ': \"~O\",\n    'Ö': '\"O',\n    '×': \"x\",\n    'Ø': \"O\",\n    'Ù': \"`U\",\n    'Ú': \"'U\",\n    'Û': \"^U\",\n    'Ü': '\"U',\n    'Ý': \"'Y\",\n    'Þ': \"Th\",\n    'ß': \"ss\",\n    'à': \"`a\",\n    'á': \"'a\",\n    'â': \"^a\",\n    'ã': \"~a\",\n    'ä': '\"a',\n    'å': \"a\",\n    'æ': \"ae\",\n    'ç': \"c\",\n    'è': \"`e\",\n    'é': \"'e\",\n    'ê': \"^e\",\n    'ë': '\"e',\n    'ì': \"`i\",\n    'í': \"'i\",\n    'î': \"^i\",\n    'ï': '\"i',\n    'ð': \"d\",\n    'ñ': \"~n\",\n    'ò': \"`o\",\n    'ó': \"'o\",\n    'ô': \"^o\",\n    'õ': \"~o\",\n    'ö': '\"o',\n    '÷': \":\",\n    'ø': \"o\",\n    'ù': \"`u\",\n    'ú': \"'u\",\n    'û': \"^u\",\n    'ü': '\"u',\n    'ý': \"'y\",\n    'þ': \"th\",\n    'ÿ': '\"y',\n    'Ā': \"A\",\n    'ā': \"a\",\n    'Ă': \"A\",\n    'ă': \"a\",\n    'Ą': \"A\",\n    'ą': \"a\",\n    'Ć': \"'C\",\n    'ć': \"'c\",\n    'Ĉ': \"^C\",\n    'ĉ': \"^c\",\n    'Ċ': \"C\",\n    'ċ': \"c\",\n    'Č': \"C\",\n    'č': \"c\",\n    'Ď': \"D\",\n    'ď': \"d\",\n    'Đ': \"D\",\n    'đ': \"d\",\n    'Ē': \"E\",\n    'ē': \"e\",\n    'Ĕ': \"E\",\n    'ĕ': \"e\",\n    'Ė': \"E\",\n    'ė': \"e\",\n    'Ę': \"E\",\n    'ę': \"e\",\n    'Ě': \"E\",\n    'ě': \"e\",\n    'Ĝ': \"^G\",\n    'ĝ': \"^g\",\n    'Ğ': \"G\",\n    'ğ': \"g\",\n    'Ġ': \"G\",\n    'ġ': \"g\",\n    'Ģ': \"G\",\n    'ģ': \"g\",\n    'Ĥ': \"^H\",\n    'ĥ': \"^h\",\n    'Ħ': \"H\",\n    'ħ': \"h\",\n    'Ĩ': \"~I\",\n    'ĩ': \"~i\",\n    'Ī': \"I\",\n    'ī': \"i\",\n    'Ĭ': \"I\",\n    'ĭ': \"i\",\n    'Į': \"I\",\n    'į': \"i\",\n    'İ': \"I\",\n    'ı': \"i\",\n    'Ĳ': \"IJ\",\n    'ĳ': \"ij\",\n    'Ĵ': \"^J\",\n    'ĵ': \"^j\",\n    'Ķ': \"K\",\n    'ķ': \"k\",\n    'Ĺ': \"L\",\n    'ĺ': \"l\",\n    'Ļ': \"L\",\n    'ļ': \"l\",\n    'Ľ': \"L\",\n    'ľ': \"l\",\n    'Ŀ': \"L\",\n    'ŀ': \"l\",\n    'Ł': \"L\",\n    'ł': \"l\",\n    'Ń': \"'N\",\n    'ń': \"'n\",\n    'Ņ': \"N\",\n    'ņ': \"n\",\n    'Ň': \"N\",\n    'ň': \"n\",\n    'ŉ': \"'n\",\n    'Ō': \"O\",\n    'ō': \"o\",\n    'Ŏ': \"O\",\n    'ŏ': \"o\",\n    'Ő': '\"O',\n    'ő': '\"o',\n    'Œ': \"OE\",\n    'œ': \"oe\",\n    'Ŕ': \"'R\",\n    'ŕ': \"'r\",\n    'Ŗ': \"R\",\n    'ŗ': \"r\",\n    'Ř': \"R\",\n    'ř': \"r\",\n    'Ś': \"'S\",\n    'ś': \"'s\",\n    'Ŝ': \"^S\",\n    'ŝ': \"^s\",\n    'Ş': \"S\",\n    'ş': \"s\",\n    'Š': \"S\",\n    'š': \"s\",\n    'Ţ': \"T\",\n    'ţ': \"t\",\n    'Ť': \"T\",\n    'ť': \"t\",\n    'Ŧ': \"T\",\n    'ŧ': \"t\",\n    'Ũ': \"~U\",\n    'ũ': \"~u\",\n    'Ū': \"U\",\n    'ū': \"u\",\n    'Ŭ': \"U\",\n    'ŭ': \"u\",\n    'Ů': \"U\",\n    'ů': \"u\",\n    'Ű': '\"U',\n    'ű': '\"u',\n    'Ų': \"U\",\n    'ų': \"u\",\n    'Ŵ': \"^W\",\n    'ŵ': \"^w\",\n    'Ŷ': \"^Y\",\n    'ŷ': \"^y\",\n    'Ÿ': '\"Y',\n    'Ź': \"'Z\",\n    'ź': \"'z\",\n    'Ż': \"Z\",\n    'ż': \"z\",\n    'Ž': \"Z\",\n    'ž': \"z\",\n    'ſ': \"s\"\n  };\n\n  function _slugify(s) {\n    if (!s) return \"\";\n    var ascii = [];\n    var ch, cp;\n\n    for (var i = 0; i < s.length; i++) {\n      if ((cp = s.charCodeAt(i)) < 0x180) {\n        ch = String.fromCharCode(cp);\n        ascii.push(charmap[ch] || ch);\n      }\n    }\n\n    s = ascii.join(\"\");\n    s = s.replace(/[^\\w\\s-]/g, \"\").trim().toLowerCase();\n    return s.replace(/[-\\s]+/g, \"-\");\n  }\n\n  mod.factory(\"Slug\", function () {\n    return {\n      slugify: _slugify\n    };\n  });\n  mod.directive(\"slug\", [\"Slug\", function (Slug) {\n    return {\n      restrict: \"E\",\n      scope: {\n        to: \"=\"\n      },\n      transclude: true,\n      replace: true,\n      template: \"<div ng-transclude></div>\",\n      link: function link(scope, elem, attrs) {\n        if (!attrs.from) {\n          throw \"must set attribute 'from'\";\n        }\n\n        scope.$parent.$watch(attrs.from, function (val) {\n          scope.to = Slug.slugify(val);\n        });\n      }\n    };\n  }]);\n  mod.filter(\"slugify\", [\"Slug\", function (Slug) {\n    return function (input) {\n      return Slug.slugify(input);\n    };\n  }]);\n  module.exports = mod;\n})();","map":null,"metadata":{},"sourceType":"script"}